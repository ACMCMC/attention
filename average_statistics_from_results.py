# %% [markdown]
# # Average statistics from results
#
# This notebook gets the average results from the experiments, which should be stored under the folder `results_{language}/{configuration}/{model_name}`.
# Each of these folders contains the following subfolders:
# - `figures`: contains the figures generated by the experiments (PDF)
# - `number_of_heads_matching`: a set of CSVs named `heads_matching_{DEPENDENCY_TYPE}.csv` with the number of times that a head attention's has correctly matched the dependency type. (rows are layers, columns are heads)
# - `variability`: a set of CSVs named `variability_{DEPENDENCY_TYPE}.csv` with the variability score for each layer and head.
# - `uas_scores`: a set of CSVs named `uas_{DEPENDENCY_TYPE}.csv` with the UAS score for each layer and head.
# %%
import pandas as pd
import numpy as np
from pathlib import Path

def get_max_uas_scores(results_dir):
    max_scores = []
    results_path = Path(results_dir)

    for language in results_path.iterdir():
        if not language.is_dir() or not language.name.startswith('results_'):
            continue

        language_name = language.name[len('results_'):]
        for configuration in language.iterdir():
            if not configuration.is_dir():
                continue

            for model_name in configuration.iterdir():
                if not model_name.is_dir():
                    continue

                uas_scores_dir = model_name / 'uas_scores'
                if not uas_scores_dir.is_dir():
                    continue

                for file_name in uas_scores_dir.iterdir():
                    if file_name.name.startswith('uas_') and file_name.name.endswith('.csv'):
                        dependency_type = file_name.name[len('uas_'):-len('.csv')]
                        df = pd.read_csv(file_name, header=0, index_col=0)
                        max_score = df.values.max()
                        max_scores.append({
                            'language': language_name,
                            'configuration': configuration.name,
                            'model_name': model_name.name,
                            'dependency_type': dependency_type,
                            'max_uas_score': max_score
                        })

    return pd.DataFrame(max_scores)

results_dir = '.'
max_uas_scores_df = get_max_uas_scores(results_dir)
print(max_uas_scores_df)


# %%
